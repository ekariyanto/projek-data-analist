# -*- coding: utf-8 -*-
"""PROJEK DQLAB

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UPcXmP6UlyFKcnm1COiy_4HZcCcqcQYk
"""

import pandas as pd
import matplotlib.pyplot as plt

# Load dataset
file_path = "/content/Salinan dari Dataset_GDS (1).xlsx"
df = pd.read_excel(file_path)

"""**Total Sales and Profit**

Menghitung total penjualan dan keuntungan di seluruh dataset.


"""

# Pastikan kolom yang diperlukan ada
# Mengkonversi kolom 'Order_Date' dan 'Ship_Date' menjadi datetime
df['Order_Date'] = pd.to_datetime(df['Order_Date'])
df['Ship_Date'] = pd.to_datetime(df['Ship_Date'])

# 1. Total Sales and Profit
total_sales = df['Sales'].sum()
total_profit = df['Profit'].sum()

# 1. Total Sales and Profit (Bar Chart)
fig, ax = plt.subplots(1, 2, figsize=(12, 5))
ax[0].barh(['Total Sales'], [total_sales], color='green')
ax[0].set_title('Total Sales', fontsize=14)
ax[0].set_xlabel('Sales Amount', fontsize=12)
ax[0].set_ylabel('Total', fontsize=12)

ax[1].barh(['Total Profit'], [total_profit], color='blue')
ax[1].set_title('Total Profit', fontsize=14)
ax[1].set_xlabel('Profit Amount', fontsize=12)
ax[1].set_ylabel('Total', fontsize=12)

plt.tight_layout()
plt.show()

print("Sales Performance Report Summary:")
print(f"Total Sales: ${total_sales:,.2f}")
print(f"Total Profit: ${total_profit:,.2f}")

"""**Sales by Category**

Mengelompokkan data berdasarkan kategori produk dan menghitung total penjualan untuk setiap kategori.




"""

sales_by_category = df.groupby('Category')['Sales'].sum().sort_values(ascending=False)

plt.figure(figsize=(10, 5))
sales_by_category.plot(kind='bar', color='purple')
plt.title('Sales by Category', fontsize=16)
plt.xlabel('Category', fontsize=12)
plt.ylabel('Sales (in thousands)', fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

print("\nSales by Category:")
print(sales_by_category)

"""

Sales by Sub-Category:

Mengelompokkan data berdasarkan sub-kategori produk dan menghitung total penjualan untuk setiap sub-kategori.

"""

sales_by_subcategory = df.groupby('Sub-Category')['Sales'].sum().sort_values(ascending=False)

plt.figure(figsize=(10, 5))
sales_by_subcategory.plot(kind='bar', color='blue')
plt.title('Sales by Sub-Category', fontsize=16)
plt.xlabel('Sub-Category', fontsize=12)
plt.ylabel('Sales (in thousands)', fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

print("\nSales by Sub-Category:")
print(sales_by_subcategory)

"""Mengelompokkan data berdasarkan wilayah dan menghitung total penjualan untuk setiap wilayah."""

sales_by_region = df.groupby('Region')['Sales'].sum().sort_values(ascending=False)
plt.figure(figsize=(10, 5))
sales_by_region.plot(kind='bar', color='orange')
plt.title('Sales by Region', fontsize=16)
plt.xlabel('Region', fontsize=12)
plt.ylabel('Sales (in thousands)', fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

print("\nSales by Region:")
print(sales_by_region)

"""op 10 Customers:

Mengelompokkan data berdasarkan nama pelanggan dan menghitung total penjualan untuk setiap pelanggan, kemudian menampilkan 10 pelanggan teratas.
"""

top_customers = df.groupby('Customer_Name')['Sales'].sum().sort_values(ascending=False).head(10)
plt.figure(figsize=(10, 5))
top_customers.plot(kind='bar', color='yellow')
plt.title('Top 10 Customers by Sales', fontsize=16)
plt.xlabel('Customer Name', fontsize=12)
plt.ylabel('Sales (in thousands)', fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout

print("\nTop 10 Customers by Sales:")
print(top_customers)